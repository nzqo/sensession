#!/bin/bash

IFACE=$1
if [ "$IFACE" = "" ]; then
  echo "Usage: ./sendsta.sh IFACE REPEAT LEN ENCODING NSS"
  exit 1
fi

REPEAT=$2
if [ "$REPEAT" = "" ]; then
  REPEAT=1
fi

LEN=$3
if [ "$LEN" = "" ]; then
  LEN=574
fi

ENCODING=$4
if [ "$ENCODING" = "" ]; then
  echo "Sending legacy data"
  ENCODING="20a"
fi

NSS=$5
if [ "$NSS" = "" ]; then
  echo "Missing NSS, defaulting to 1"
  NSS=1
fi
case "$NSS" in
  1|2|3|4)
    ;;
  *)
    echo "Invalid number of spatial streams to send"
    exit 1
    ;;
esac

BW=$(echo $ENCODING | tr -dc '0-9')
PHY=$(echo $ENCODING | tr -dc 'a-z')

if [ "$PHY" = "ac" -o "$PHY" = "ax" ]; then
  if [ "$PHY" = "ac" ]; then
    BYTEENC="02"
  else
    BYTEENC="03"
  fi

  case "$BW" in
    20)
      BYTEBW="01"
      ;;
    40)
      BYTEBW="02"
      ;;
    80)
      BYTEBW="03"
      ;;
    160)
      BYTEBW="04"
      ;;
    *)
      echo "Invalid BW"
      exit 1
  esac

  # \x10\x00\x${BYTEBW}\x${BYTEENC}\
  BYTE1="${NSS}0"
  BYTE2="00"

elif [ "$PHY" = "n" ]; then
  BYTEENC="01"

  case "$BW" in
    20)
      BYTEBW="01"
      ;;
    40)
      BYTEBW="02"
      ;;
    *)
      echo "Invalid BW"
      exit 1
  esac

  # \x00\x00\x${BYTEBW}\x01
  BYTE1="${NSS}0"
  BYTE2="00"

elif [ "$PHY" = "a" -o "$PHY" = "g" ]; then
  if [ "$NSS" != "1" ]; then
    echo "Only 1NSS supported in 11a/g"
    exit 1
  fi

  BYTE1="0c"
  BYTE2="00"
  BYTEBW="01"
  BYTEENC="00"
  if [ "$BW" != "20" ]; then
    echo "Invalid BW"
    exit 1
  fi
else
  echo "Invalid encoding"
  exit 1
fi

echo "$BYTE1 $BYTE2 $BYTEBW $BYTEENC"

while [ "$REPEAT" != "0" ]; do
./nexutil -I ${IFACE} -s 501 -b -l ${LEN} -v `printf "\
\x${BYTE1}\x${BYTE2}\x${BYTEBW}\x${BYTEENC}\
\x88\x02\x00\x00\
\xff\xff\xff\xff\xff\xff\
\x00\x12\x34\x56\x78\x9b\
\x00\x00\x00\xca\xfe\x23\
\x00\x00\
\x00\x00\
\xaa\xaa\x03\x00\x00\x00\x08\x00\
\x45\x00\x00\x26\xc5\x16\x40\x00\x40\x11\
\xe0\x4a\xc0\xa8\x0a\x14\xc0\xa8\x0a\x01\
\x9a\x30\x0e\xfe\x00\x12\xa6\xcf\
\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\
\xaa\xaa
\xde\xad\xbe\xef\xde\xad\xbe\xef\xde\xad\xbe\xef\xde\xad\xbe\xef\xde\xad\xbe\xef\
\xde\xad\xbe\xef\xde\xad\xbe\xef\xde\xad\xbe\xef\xde\xad\xbe\xef\xde\xad\xbe\xef\
\xde\xad\xbe\xef\xde\xad\xbe\xef\xde\xad\xbe\xef\xde\xad\xbe\xef\xde\xad\xbe\xef\
\xde\xad\xbe\xef\xde\xad\xbe\xef\xde\xad\xbe\xef\xde\xad\xbe\xef\xde\xad\xbe\xef\
\xde\xad\xbe\xef\xde\xad\xbe\xef\xde\xad\xbe\xef\xde\xad\xbe\xef\xde\xad\xbe\xef\
\xde\xad\xbe\xef\xde\xad\xbe\xef\xde\xad\xbe\xef\xde\xad\xbe\xef\xde\xad\xbe\xef\
\xde\xad\xbe\xef\xde\xad\xbe\xef\xde\xad\xbe\xef\xde\xad\xbe\xef\xde\xad\xbe\xef\
\xde\xad\xbe\xef\xde\xad\xbe\xef\xde\xad\xbe\xef\xde\xad\xbe\xef\xde\xad\xbe\xef\
\xde\xad\xbe\xef\xde\xad\xbe\xef\xde\xad\xbe\xef\xde\xad\xbe\xef\xde\xad\xbe\xef\
\xde\xad\xbe\xef\xde\xad\xbe\xef\xde\xad\xbe\xef\xde\xad\xbe\xef\xde\xad\xbe\xef\
\xde\xad\xbe\xef\xde\xad\xbe\xef\xde\xad\xbe\xef\xde\xad\xbe\xef\xde\xad\xbe\xef\
\xde\xad\xbe\xef\xde\xad\xbe\xef\xde\xad\xbe\xef\xde\xad\xbe\xef\xde\xad\xbe\xef\
\xde\xad\xbe\xef\xde\xad\xbe\xef\xde\xad\xbe\xef\xde\xad\xbe\xef\xde\xad\xbe\xef\
\xde\xad\xbe\xef\xde\xad\xbe\xef\xde\xad\xbe\xef\xde\xad\xbe\xef\xde\xad\xbe\xef\
\xde\xad\xbe\xef\xde\xad\xbe\xef\xde\xad\xbe\xef\xde\xad\xbe\xef\xde\xad\xbe\xef\
\xde\xad\xbe\xef\xde\xad\xbe\xef\xde\xad\xbe\xef\xde\xad\xbe\xef\xde\xad\xbe\xef\
\xde\xad\xbe\xef\xde\xad\xbe\xef\xde\xad\xbe\xef\xde\xad\xbe\xef\xde\xad\xbe\xef\
\xde\xad\xbe\xef\xde\xad\xbe\xef\xde\xad\xbe\xef\xde\xad\xbe\xef\xde\xad\xbe\xef\
\xde\xad\xbe\xef\xde\xad\xbe\xef\xde\xad\xbe\xef\xde\xad\xbe\xef\xde\xad\xbe\xef\
\xde\xad\xbe\xef\xde\xad\xbe\xef\xde\xad\xbe\xef\xde\xad\xbe\xef\xde\xad\xbe\xef\
" | openssl enc -base64 | tr -d "\n"`
REPEAT=$((REPEAT-1))
usleep 10000
done
